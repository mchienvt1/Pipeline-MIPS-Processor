$date
	Sun May 18 18:37:43 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module IF_tb $end
$var wire 32 ! pc_fetch [31:0] $end
$var wire 32 " instr_fetch [31:0] $end
$var reg 1 # clk $end
$var reg 1 $ jump_decode $end
$var reg 32 % pc_branch [31:0] $end
$var reg 32 & pc_jump [31:0] $end
$var reg 1 ' pcsrc_decode $end
$var reg 1 ( rst $end
$var reg 1 ) stall_pc $end
$scope module dut $end
$var wire 1 # clk $end
$var wire 1 $ jump_decode $end
$var wire 32 * pc_branch [31:0] $end
$var wire 32 + pc_jump [31:0] $end
$var wire 1 ' pcsrc_decode $end
$var wire 1 ( rst $end
$var wire 1 ) stall_pc $end
$var wire 32 , pc_out_0 [31:0] $end
$var wire 32 - pc_out [31:0] $end
$var wire 32 . pc_in [31:0] $end
$var wire 32 / pc_fetch [31:0] $end
$var wire 32 0 instr_fetch [31:0] $end
$scope module adder $end
$var wire 32 1 b [31:0] $end
$var wire 32 2 sum [31:0] $end
$var wire 32 3 a [31:0] $end
$upscope $end
$scope module imem $end
$var wire 32 4 instr [31:0] $end
$var wire 32 5 pc [31:0] $end
$upscope $end
$scope module pc $end
$var wire 1 # clk $end
$var wire 1 ( rst $end
$var wire 1 ) stall_pc $end
$var wire 32 6 pc_in [31:0] $end
$var reg 32 7 pc_out [31:0] $end
$upscope $end
$scope module select_branch $end
$var wire 32 8 a [31:0] $end
$var wire 32 9 b [31:0] $end
$var wire 1 ' sel $end
$var wire 32 : out [31:0] $end
$upscope $end
$scope module select_jump $end
$var wire 32 ; a [31:0] $end
$var wire 32 < b [31:0] $end
$var wire 1 $ sel $end
$var wire 32 = out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx =
b0 <
bx ;
bx :
b0 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
b100 1
bx 0
bx /
bx .
bx -
bx ,
b0 +
b0 *
0)
1(
0'
b0 &
b0 %
0$
0#
bx "
bx !
$end
#3000
0(
#5000
b100 .
b100 6
b100 =
b100000000000100000000000000101 "
b100000000000100000000000000101 0
b100000000000100000000000000101 4
b100 ,
b100 :
b100 ;
b100 !
b100 /
b100 2
b100 8
b0 -
b0 3
b0 5
b0 7
1#
#10000
0#
#13000
1(
#15000
b1000 .
b1000 6
b1000 =
b100000000000110000000000001100 "
b100000000000110000000000001100 0
b100000000000110000000000001100 4
b1000 ,
b1000 :
b1000 ;
b1000 !
b1000 /
b1000 2
b1000 8
b100 -
b100 3
b100 5
b100 7
1#
#20000
0#
#25000
b1100 .
b1100 6
b1100 =
b100000000001110000000000000110 "
b100000000001110000000000000110 0
b100000000001110000000000000110 4
b1100 ,
b1100 :
b1100 ;
b1100 !
b1100 /
b1100 2
b1100 8
b1000 -
b1000 3
b1000 5
b1000 7
1#
#30000
0#
#33000
1)
#35000
1#
#40000
0#
#43000
b100000 .
b100000 6
b100000 =
b100000 ,
b100000 :
b100000 ;
b100000 %
b100000 *
b100000 9
1'
0)
#45000
b10101100000001000000000000000100 "
b10101100000001000000000000000100 0
b10101100000001000000000000000100 4
b100100 !
b100100 /
b100100 2
b100100 8
b100000 -
b100000 3
b100000 5
b100000 7
1#
#50000
0#
#53000
b10000000 .
b10000000 6
b10000000 =
b100100 ,
b100100 :
b100100 ;
b10000000 &
b10000000 +
b10000000 <
1$
0'
#55000
bx "
bx 0
bx 4
b10000100 ,
b10000100 :
b10000100 ;
b10000100 !
b10000100 /
b10000100 2
b10000100 8
b10000000 -
b10000000 3
b10000000 5
b10000000 7
1#
#60000
0#
#63000
b10000100 .
b10000100 6
b10000100 =
0$
#65000
b10001000 .
b10001000 6
b10001000 =
b10001000 ,
b10001000 :
b10001000 ;
b10001000 !
b10001000 /
b10001000 2
b10001000 8
b10000100 -
b10000100 3
b10000100 5
b10000100 7
1#
#70000
0#
#75000
b10001100 .
b10001100 6
b10001100 =
b10001100 ,
b10001100 :
b10001100 ;
b10001100 !
b10001100 /
b10001100 2
b10001100 8
b10001000 -
b10001000 3
b10001000 5
b10001000 7
1#
#80000
0#
#83000
